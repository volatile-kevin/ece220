#include <stdio.h>
#define INT_MAX 9999

int min(int a, int b);
int min_path_sum(int **grid, int m, int n, int i, int j);
int main() {

 /* First test */
 int grid1[3][3]={1, 2, 3, 3, 4, 1, 2, 5, 1};
 int m = 3;
int n = 3;
int sum = min_path_sum(grid1, m, n, m-1, n-1);
printf("min path sum of grid1 is %d \n", sum);
 /* Second test
 int grid2[3][4]={1, 3, 2, 1, 1, 2, 1, 2, 3, 2, 1, 1};
m = 3;
n = 4;
sum = min_path_sum(grid2, m, n, m-1, n-1);
printf("min path sum of grid2 is %d \n", sum);
 return 0;
 */
}
int min(int a, int b){
    if( a > b)
    {
      return b;
    }
    return a;

/*this function returns the smaller of the two inputs */
}
int min_path_sum(int **grid, int m, int n, int i, int j){
/* int** grid: an mxn grid
 int m, n: the dimension of the 2d grid
 int i, j: current cell index
 return: minimum path sum from (0, 0) to (i, j) */
/* Your Code Starts Here */
  /*if(i<0||j<0||i>=m||j>=n){
  	return INT_MAX;
  }*/
  int mps_l, mps_u;
  if(i == 0 && j == 0){
      return (grid[i][j]);
  }
  if(j > 0){
    mps_l = min_path_sum(grid, m, n, i, j-1);
  }
  if(i > 0){
    mps_u = min_path_sum(grid, m, n, i-1, j);
  }

  return min(mps_l, mps_u);

}
